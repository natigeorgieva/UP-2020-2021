/*
 Ваш колега си е направил функция, която създава аритметична прогресия. Но за
нещастие оплескал кода си, така че понякога в една от неговите прогресии се вмъкват и
други елементи, които не принадлежат на нея. Ваша работа е да филтрирате подадения
масив, така че да образува аритметична прогресия спрямо първите си два елемента. След
като филтрирате масива проверете дали елементите, които сте премахнали образуват
геометрична прогресия и върнете тази стойност. Напишете подходяща функция, която
изпълнява тези изисквания.
Пример:
Вход:
{2, 4, 3, 6, 8, 9, 10, 12, 14, 16, 27}
Резултат: аритметична{2, 4, 6, 8, 10, 12, 14, 16}
филтрирани{3, 9, 27}
образуват ли геометрична прогресия - да

*/

void Print(double arr[], int len)//Функция за принтиране на масив
 {
	 for (int i = 0; i < len; i++)
		 cout << arr[i] << " ";
 }

//2
 void Filter(double arr[], int& len, int pos)//подаваме позицията, до която сме стигнали в масива и дължината му (нея като псевдоним)
 {
	 for (int i = pos; i < len-1; i++)
	 {
		 arr[i] = arr[i + 1];
	 }
	 len--;//Намаляме дължината накрая
 }


 bool IsGeometric(double arr[], int len)//Прверяваме дали подадения масив е геометрична прогресия (до където сме го запълнили, разбира се)
 {
	 if (len <= 2)//Всяка прогресия от две числа е геометрична 
		 return true;
	 double diff;
	 if (arr[0] != 0)//Ако първият елемент е различен от 0, стандартно си определяме частното
		 diff = arr[1] / arr[0];
	 else return false;//Няма как геометрична прогресия да започва с 0
   
	 for (int i = 1; i < len-1; i++)
	 {
		 if (arr[i] * diff != arr[i + 1])//Проверяваме дали произведението на i-тия елемент с частното е равно на i+1-вия елемент
			 return false;
	 }
	 return true;//Ако сме стигнали чак дотук, значи са изпълнени всички условия за геометрична прогресия
 }

//С тази функция искаме да направим 2 неща: да върнем броя на елементите, които спадат към геометричната прогресия и броя на елементите, които спадат към аритметичната
//Това може да се постигне, като подадем дължината на входния масив като псевдоним и върнем дължината на геометричната прогресия като стойност

int Arithmetic(double arr[], double filtered[], int& len)
 {
	 if (len <= 2)//Всеки две числа са аритметична прогресия и следователно връщаме дължината на геометричната да е 0
		 return 0;
	 int diff = arr[1] - arr[0];//Определяме си разликата
	 int count = 0;//Броя на филтрираните елементи

	 for (int i = 1; i < len-1; i++)
	 {
		 if (arr[i + 1] - arr[i] != diff)
		 {
     //Ако сме влезли в този if, то i+1-вият елеменент не изпълнява условието на артметичната прогресия, следователно го пращаме в масива filtered
			 filtered[count] = arr[i+1];
			 count++;
			 Filter(arr, len, i+1);//Смаляваме размера на масива с аритметичната прогресия
			 i--;//Връщаме итератора, тъй като трябва да проверим дали i-тия елемент + разликата = новия i+1-ви елемент
		 }
	 }
	 return count;
 }
 
 
 int main()
 {
 //N>2 Всяка прогресия от две числа е аритметична
	 double arr[N];
	 for (int i = 0; i < N; i++)
		 cin >> arr[i];

	 double filtered[N];
	 int len = N;
	 int k = Arithmetic(arr, filtered, len);//в края на тази функция len  има друга стойност, тъй като сме го подали като псевдоним
   //k ни е дължината на филтрирания масив
	 Print(arr, len);
	 cout << endl;
	 Print(filtered, k);
	 cout << endl << IsGeometric(filtered, k);
 }
 
